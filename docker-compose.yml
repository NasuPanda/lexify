version: '3'
services:
  db:
    container_name: postgres
    image: postgres:11
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust # Development
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # Heatlthcheck: `depends_on` ensures only that the database container starts before the backend container,
    # but it doesn't guarantee that the database service within the container is ready.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  db_test:
    container_name: postgres_test
    image: postgres:11
    volumes:
      - test_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust # for testing
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"  # Different host port to avoid conflict

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    # command: uvicorn app.main:app --host '0.0.0.0' --port 8000 # Production
    command: bash -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload" # Development
    # command: bash -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000" # Production
    volumes:
      - ./backend:/backend
    depends_on:
      db:
        condition: service_healthy # wait for the database to be healthy before starting the backend service
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HOST: ${HOST}
      PORT: 8000

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: Dockerfile.frontend
    user: "node"
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    command: "yarn start"
    ports:
      - "9999:9999"
    depends_on:
      - backend

# Declaration of the named volume
volumes:
  db_data:
  test_db_data:
